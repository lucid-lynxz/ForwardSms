apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "../config/sign.gradle"

android {
    compileSdkVersion 34
    defaultConfig {
        applicationId "org.lynxz.forwardsms"
        minSdkVersion BuildConfigInfo.minSdkVersion
        targetSdkVersion BuildConfigInfo.targetSdkVersion
        versionCode BuildConfigInfo.versionCode
        versionName BuildConfigInfo.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
            buildConfigField("String", "dd_corpid", getLocalProperties("dd_corpid", "\"\""))
            buildConfigField("String", "dd_corpsecret", getLocalProperties("dd_corpsecret", "\"\""))
            buildConfigField("String", "dd_agent", getLocalProperties("dd_agent", "\"\""))

            buildConfigField("String", "tg_bottoken", getLocalProperties("tg_bottoken", "\"\""))
            buildConfigField("String", "tg_default_userName", getLocalProperties("tg_default_userName", "\"\""))

            buildConfigField("String", "feishu_appid", getLocalProperties("feishu_appid", "\"\""))
            buildConfigField("String", "feishu_appsecret", getLocalProperties("feishu_appsecret", "\"\""))
        }
        release {
            initWith(debug)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

//    dataBinding {
//        enabled = true
//    }
    buildFeatures {
        dataBinding = true
    }

    // 自定义生成的apk名称
    android.applicationVariants.all { variant ->
        // 指定输出目录
        // variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/apks")
        // 指定输入文件名称
        variant.outputs.all {
            outputFileName = "ForwardSMS_${flavorName}_${buildType.name}_v${defaultConfig.versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    api project(path: ':baseImLib')
    api project(path: ':imDingDing')
    api project(path: ':imTG')
    api project(path: ':imFeishu')

    api project(path: ':SecuritySP')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
//    api 'org.lynxz.securitysp:SecuritySp:1.0.3'

    testImplementation(Testing.jUnit)
    testImplementation(Testing.runnerX)
    androidTestImplementation(Testing.espressoCoreX)

    implementation(Libs.appcompatX)
    implementation(Libs.constraintLayoutX)

    implementation(Libs.kotlinCoreKtx)
    implementation(Libs.gson)
    implementation(Libs.kotlinCoroutinesAndroid)

//    implementation(Libs.lifeCycleViewModelX)
    implementation(Libs.lifecycleViewModelExt)
    implementation(Libs.lifecycleExt)

    implementation(Libs.switchButton)
    implementation(Libs.pickerView)
    implementation(Libs.backgroundShape)
    implementation(Libs.floatingActionButton)

    // recyclerview adapter
    implementation Libs.dslAdapterX
    implementation(Libs.baseRecyclerViewAdapterHelperX)
    implementation(Libs.lynxzUtils)
}


/**
 * 从指定的配置文件中读取属性值,若存在且类型与默认值匹配,则返回,否则返回默认值
 * @param propertyName 属性名
 * @param defaultValue 默认值
 * @param propertiesFileName 文件名,默认为: local.properties
 */
def getLocalProperties(String propertyName, Object defaultValue,
                       String propertiesFileName = "local.properties") {
    File file = rootProject.file(propertiesFileName)
    if (!file.exists() || propertyName == null || propertyName.isEmpty()) {
        return defaultValue // 文件不存在或者属性名为空,则返回默认值
    }

    Properties properties = new Properties()
    properties.load(file.newInputStream())

    def localKeys = properties.keys()
    for (keyName in localKeys) {
        if (keyName != propertyName) continue
        def localValue = properties.getProperty(keyName)

        // 根据默认值类型进行类型转换
        if (defaultValue instanceof Integer) {
            return Integer.parseInt(localValue)
        } else if (defaultValue instanceof Boolean) {
            return Boolean.parseBoolean(localValue)
        } else if (defaultValue instanceof Double) {
            return Double.parseDouble(localValue)
        } else if (defaultValue instanceof Float) {
            return Float.parseFloat(localValue)
        } else if (defaultValue instanceof String || defaultValue instanceof GString) {
            return localValue
        }
    }
    // 类型不匹配,返回默认值
    return defaultValue
}