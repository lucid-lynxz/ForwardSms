apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: "../config/sign.gradle"

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion
    defaultConfig {
        applicationId "org.lynxz.forwardsms"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 4
        versionName "1.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField("String", "dd_corpid", getLocalProperties("dd_corpid", ""))
            buildConfigField("String", "dd_corpsecret", getLocalProperties("dd_corpsecret", ""))
            buildConfigField("String", "dd_agent", getLocalProperties("dd_agent", ""))
            buildConfigField("String", "tg_bottoken", getLocalProperties("tg_bottoken", ""))
            buildConfigField("String", "tg_default_userName", getLocalProperties("tg_default_userName", ""))
        }
        release {
            initWith(debug)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        targetCompatibility = 1.8
        sourceCompatibility = 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    api project(path: ':baseImLib')
    api project(path: ':imDingDing')
    api project(path: ':imTG')

    testImplementation(test.junit)
    testImplementation(test.testRunnerX)
    testImplementation(test.espressoX)

    implementation(libs.appcompatX)
    implementation(libs.constraintLayoutX)

    implementation(libs.ktxCore)
    implementation(libs.kotlinxCoroutinesAndroid)

    implementation(libs.lifeCycleViewModelX)
    implementation(libs.lifeCycleViewModelKtxX)
    implementation(libs.lifeCycleExtensionX)
}


/**
 * 从指定的配置文件中读取属性值,若存在且类型与默认值匹配,则返回,否则返回默认值
 * @param propertyName 属性名
 * @param defaultValue 默认值
 * @param propertiesFileName 文件名,默认为: local.properteis
 */
def getLocalProperties(String propertyName, Object defaultValue,
                       String propertiesFileName = "local.properties") {
    File file = rootProject.file(propertiesFileName)
    if (!file.exists() || propertyName == null || propertyName.isEmpty()) {
        return defaultValue // 文件不存在或者属性名为空,则返回默认值
    }

    Properties properties = new Properties()
    properties.load(file.newInputStream())

    def localKeys = properties.keys()
    for (keyName in localKeys) {
        if (keyName != propertyName) continue
        def localValue = properties.getProperty(keyName)

        // 根据默认值类型进行类型转换
        if (defaultValue instanceof Integer) {
            return Integer.parseInt(localValue)
        } else if (defaultValue instanceof Boolean) {
            return Boolean.parseBoolean(localValue)
        } else if (defaultValue instanceof Double) {
            return Double.parseDouble(localValue)
        } else if (defaultValue instanceof Float) {
            return Float.parseFloat(localValue)
        } else if (defaultValue instanceof String || defaultValue instanceof GString) {
            return localValue
        }
    }
    // 类型不匹配,返回默认值
    return defaultValue
}